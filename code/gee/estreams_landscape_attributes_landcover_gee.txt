// Land use and land cover descriptors extraction from Corine:
 
// Author: Thiago Nascimento (thiago.nascimento@eawag.ch)

// This notebook is part of the EStreams publication and was used to extract and aggregate 
// lulc characteristics from the Corine dataset. 
// ---------------------------------------------------------------------------------------------------

// Purpose: Extract and aggregate landcover dara from the Corine dataset for specified basins.
// Inputs: Basins shapefile (uploaded as an asset), Corine data, targetYear.
// Outputs: CSV file with landcover areas for each basin for a specific year.

// Define the year for which you want to calculate land cover [1990, 2000, 2006, 2012, 2018]
var targetYear = 1990;

// Define chunk size for processing
var chunkSize = 50;

// Load the basins shapefile as a FeatureCollection
var basinsFC = ee.FeatureCollection("projects/ee-thiagovmdon/assets/estreams_catchments");

// Define a list of land cover classes for which to calculate landcover areas
var classes = ee.List([111,112,121,122,123,124,131,132,133,141,142,211,212,213,221,222,223,231,241,242,243,244,311,312,313,321,322,323,324,331,332,333,334,335,411,412,421,422,423,511,512,521,522,523]);

// Function to calculate land cover for a single feature
function calculateCorineClasses(feature, year) {
  var corine = ee.Image('COPERNICUS/CORINE/V20/100m/' + year);

  // Calculate land cover for each class
  var corineData = classes.map(function(corineClass) {
    var corineMask = corine.select(['landcover']).eq(ee.Number(corineClass));
    var areaCorineMask = corineMask.multiply(ee.Image.pixelArea());
    var areaCorine = areaCorineMask.reduceRegion({
      reducer: ee.Reducer.sum(),
      geometry: feature.geometry(),
      scale: 100,
      maxPixels: 1e10
    });

    return ee.Feature(null, {
      'code': feature.get('basin_id'), // Include the basin ID
      'year': year, // Include the year
      'class': corineClass,
      'area_sqm': ee.Number(areaCorine.get('landcover'))
    });
  });

  return ee.FeatureCollection(corineData);
}

// Calculate the number of chunks needed
var numChunks = Math.ceil(basinsFC.size().getInfo() / chunkSize);

// Loop through each chunk
for (var chunkIndex = 0; chunkIndex < numChunks; chunkIndex++) {
  // Calculate start and end index for the current chunk
  var startIdx = chunkIndex * chunkSize;
  var endIdx = (chunkIndex + 1) * chunkSize - 1;

  // Convert the FeatureCollection to a list
  var basinList = basinsFC.toList(basinsFC.size());

  // Select the subset based on index using ee.List.slice()
  var selectedBasins = ee.FeatureCollection(basinList.slice(startIdx, endIdx + 1));

  // Calculate Corine data for each selected basin
  var results = selectedBasins.map(function(feature) {
    return calculateCorineClasses(feature, targetYear);
  });

  // Flatten the results and export the data
  var flattenedResults = results.flatten();
  var exportDesc = 'EStreams_corine_' + targetYear + '_gee_' + startIdx + '_' + endIdx;
  
  Export.table.toDrive({
    collection: flattenedResults,
    description: exportDesc,
    folder: 'EStreams_exports',
    fileNamePrefix: exportDesc,
    fileFormat: 'CSV'
  });
}
